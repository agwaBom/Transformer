{'ids': [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], 'language': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'batch_size': 32, 'code_word_rep': tensor([[47093, 10468, 20846, 20793, 28439, 48870,  8619, 20793, 27618, 29231,
          6926, 11521, 28439, 48870, 10468,  6926, 49372, 27188, 48870,  8180],
        [47093, 29538, 46582, 19420, 27562, 19420, 45757, 22241, 46582, 19420,
         27562, 19420, 19062, 27562, 19420, 45757, 22241, 19062, 27562, 19420],
        [47093, 26174, 25067, 19802,  3955, 46582, 11768, 26174, 30496,  3955,
         19062, 17004, 26510, 11424, 25911, 34124,  3955, 38696, 48533,  3955],
        [47093, 20119, 25189, 11014, 25189, 11014,  5965, 29231, 11014, 11521,
         25189, 11014, 46582, 11014,  5965, 11014,  5965, 19062,     1, 18300],
        [47093, 30342,  7353, 23674,  5965,  7353,  5965, 20341, 15099, 19062,
          5965, 45908, 11521,  3664,  7353,  6709,  7353,  5965, 20341, 20341],
        [47093, 30342, 26623,  8342, 49146, 39447, 12668, 49146,  5755, 18300,
         19062, 39447, 30342, 11768, 18300, 36544, 10735, 39447,  9147,  4880],
        [47093,  5767, 23323, 18404, 39253, 16413, 22850, 30496, 22241, 19062,
          5767, 15544, 18404, 39253, 16413, 30582, 36737, 22850, 30496, 22241],
        [47093, 23341, 11810, 11810, 22729, 14192,     1,     1, 16128, 48870,
         29231, 48870, 11521, 11489, 29231, 16128, 11521,     1, 14192, 18489],
        [39238, 34387,     1, 47093, 44858, 49649, 17088, 49649, 26526, 33683,
          7072, 30556, 45039,     1, 49649, 41172,  3686, 36217, 43928, 49649],
        [47093, 30342,     1, 11439, 40499, 21832, 11439, 14976,  2598, 41805,
         33219, 11439, 19062, 33536, 34124,     1, 11439, 30342, 11768, 18300],
        [47093,  8593, 33841,  8321, 40157, 30496, 46974, 10561, 19972, 21788,
         20119, 44921, 32978, 19972, 47830, 20982, 21788, 40766, 49372, 24463],
        [47093,  3165, 34630, 19950, 48383, 44183, 19651, 34630, 29231,  5965,
         11521, 19651, 15967,  3165, 34630, 19950, 48383, 19651,  5965, 34630],
        [27585, 24532, 20724,   749, 20724,   749, 23981, 20724,   749, 23981,
           749,  9011, 27246,   399, 27352, 20724,   749, 23981,   749,  9011],
        [47093, 42758, 47699, 21203,  5576, 45469, 10639,  6827, 21203,     1,
         13183,     1, 26741, 11525, 45453, 10639, 16119,  9151, 10639,     1],
        [47093,   582, 38391, 45857, 32694, 29231, 23851, 11521, 32694, 18404,
          8619, 23851, 43681, 15563, 26402, 26175, 15563, 20951, 23851,  9315],
        [47093, 42758, 31620,  3664, 10713, 14976, 16128, 31620, 26495, 24463,
         19338, 49448, 49448, 15701,  9151, 11768, 32978, 11521, 30732, 16128],
        [47093, 24567, 15967, 25302, 24567, 15967, 33536, 33536, 26175,     1,
         46268, 45733,     1, 19062, 17410, 24567, 15967, 33536,  1100, 25302],
        [47093, 11810, 28897,  5965,  5965, 17652, 19062, 18762, 29231, 45101,
         11521, 20094, 20119, 38950, 46582,  5965, 17652, 48347, 45101, 46572],
        [47093, 49453, 33319,     1, 36544, 40857, 27834, 17501, 46582, 17501,
         10910,     1, 19062,     1, 32874, 47780, 19062,     1, 49372, 17501],
        [47093, 20119, 30259, 34689, 18300, 30259, 19651, 31566, 19651, 24583,
         32584, 39561, 42975, 30259, 19651, 42782, 11179, 19062,   938, 30259],
        [47093, 14474, 29744, 21101,  1277, 45108, 32388, 29231, 46247, 11521,
          1277, 45108, 29744, 11446, 46582, 46247, 11521, 32388, 38875,  9391],
        [47093, 23341,  5574,  5628,  5574, 46582,  5574, 19062, 30496, 42612,
         42612, 24022,  5574, 17087,  7306, 45337,     1, 35408, 19062, 32978],
        [47093, 20119,  1551, 42882, 25696,  3664, 42882, 22850, 19062, 15639,
          8499, 11995, 47472, 26340,  7979, 18015,     1, 49775, 42882,     1],
        [47093, 39276, 25676,  4902,  4902, 26977, 42486, 20341, 18300, 48205,
         34176, 20341, 19062, 48205, 39276, 25676,  4902,  4902, 26977, 42486],
        [47093, 40459, 36238, 47218, 19802, 20091,  6220, 49758, 47218, 45924,
         46582, 20091, 18543, 21659,     1,     1, 18543,     1, 47218, 18543],
        [47093, 39178, 24606, 37167, 37200,   702, 49920,  2814, 24606, 23416,
          2814, 37167, 19062, 24606, 20535, 23416,  2814,  2814, 23941, 24463],
        [47093, 30342, 40467, 20846, 19802, 26977, 29325, 19802, 47618, 19802,
         39561, 46572, 45908, 19062, 26977, 11521, 31490, 11041, 35563,     1],
        [47093, 20119, 42074, 42882, 25696,  3664, 42882, 22850, 19062, 15639,
          8499, 11995, 47472, 41562,  7979, 18015,     1, 49775, 42882,     1],
        [47093,  8091,   986, 24463,  8091,   986,   986, 24463, 29231,  5965,
         11521,  8091,   986, 12672,  5965, 19062,   986, 22189, 21670, 38749],
        [47093, 46765, 27363,     1,  9042, 33109, 19062, 41040, 48459, 11521,
         34507, 44295, 11926, 36544, 41040, 48459, 11521, 33109, 34465, 19116],
        [47093, 20119, 13630, 16413, 40627, 48844, 35013, 16413, 20119, 35109,
         48844, 40627, 48844, 21130, 19062, 16413, 20119, 13558,  4763, 35013],
        [    1, 27752,  2038, 27752,  2790, 22175, 26738, 12751,     1,  2790,
         40782, 47093,     1, 33899, 48944, 19062, 43655, 19936,     1, 12300]]), 'code_char_rep': None, 'code_type_rep': None, 'code_mask_rep': None, 'code_len': tensor([20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
        20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20]), 'summ_word_rep': tensor([[    2, 28286,  8068, 12648, 11139, 21742, 16181,  3557, 21887,  6296,
         17096, 20363, 14503, 14047,     3],
        [    2,  9709,  6493, 11793, 22972, 22991, 27442, 21887,  5307, 27956,
         14503, 18213, 11793, 14047,     3],
        [    2,  1368, 27956,  2350, 18213,  6387, 17350, 21742, 12029, 13152,
         21414,  6947, 10534, 14047,     3],
        [    2, 11544,  8068,  6645, 14465, 28016, 20363, 21742,  6645,  3557,
          3963, 21742, 15142, 14047,     3],
        [    2, 28152,  1368, 27956, 21742,  3489, 20685, 18213,  6947, 21742,
          4435, 11139,  6268, 14047,     3],
        [    2, 11544,  1368, 27956, 21742,  3438,  4986, 29474, 18213,  8068,
         13638, 15161, 11076, 14047,     3],
        [    2, 15282, 20363,  3431,  7728, 24249, 11139,  3438, 14072, 11139,
          7728,  3394, 14438, 14047,     3],
        [    2, 29659,  8068,  2176,  1018,  7123, 17981,  8068,  8598,  2176,
         21887, 11196,  2176, 14047,     3],
        [    2, 20687, 13502, 15995,  4986,  7003,  8279, 15944, 11139, 17239,
         21055, 21397, 16224, 14047,     3],
        [    2,  7728, 17530,  6461, 16497, 16528,  8068, 20128,  7376, 24156,
          9159, 13326,  8428, 14047,     3],
        [    2, 24594, 21742, 22082,  6461,  6947, 21742,  6360, 20363, 21742,
         12611,  6947, 10542, 14047,     3],
        [    2,  8068, 20793, 20363, 29011, 10815, 21742, 11936,  3699, 23362,
         21742,  4783, 20793, 14047,     3],
        [    2,  5429, 21742,   443,  1018,  7728, 12573,   443, 14465,  3963,
           530, 21887, 13002, 14047,     3],
        [    2, 10353, 25562,  7003,  1168, 27268, 26578,  9498,  3316,  6947,
         28615, 21579,  3557, 14047,     3],
        [    2, 12724, 22972,  4226, 27500, 17554, 24493,  1018, 27492, 27110,
         10354,  6531, 26175, 14047,     3],
        [    2,  1480, 29486,  7728,  6466,  9059,  6947, 21742, 21397,  2176,
          2204, 16528, 17776, 14047,     3],
        [    2, 11544,  8068, 10571,  2176,  1018, 21742, 14805,  9658,  6947,
         21742,  9059, 15204, 14047,     3],
        [    2, 11544, 21742,  2176,  1018, 23284,  7003, 18717, 20491, 21742,
          3438, 22473, 14047,     3,     0],
        [    2, 29659, 20026, 28869, 17885, 16707, 24069, 21887,  4970, 16707,
         24069,  5804, 14047,     3,     0],
        [    2, 28152, 21742,  4928,  9449,  1018,  5169, 12648,  3865,  3963,
         20353,  3227, 14047,     3,     0],
        [    2, 23805, 17878,  6907, 21397, 19449, 24585, 22991, 21742, 19909,
         20186,  6714, 14047,     3,     0],
        [    2, 14085,  8068, 21954, 12885,  6947,  3326, 20363,  8068, 16489,
         27453,  9059, 14047,     3,     0],
        [    2, 24933,  8068, 15436,  2176, 17554,  8330,  7728, 25695, 20363,
          8068,  5089, 14047,     3,     0],
        [    2,  3748,  7728, 22121, 25430, 15421, 20363, 21742, 16181,  2899,
          9712, 24836, 14047,     3,     0],
        [    2, 24202, 21742, 15431,  6947, 21742,  9928, 11139,  8068, 12183,
         19872, 14297, 14047,     3,     0],
        [    2, 28286,  8068, 23424,  1651, 21397,  8068, 22257, 21887, 12450,
         21742,  1651, 14047,     3,     0],
        [    2, 11544,  1368, 27956, 21742,  3438, 12648, 12029, 18213,  8068,
         24211, 12648, 14047,     3,     0],
        [    2, 24933,  8068, 15436,  2176, 17554, 26773,  7728, 25695, 21397,
          8068,  5089, 14047,     3,     0],
        [    2, 11544, 21742, 13437,  1018, 21742, 24552,    37,  8068, 28690,
          1018,  4647, 14047,     3,     0],
        [    2, 28152,  1368, 27956, 16419,  6986,  5017, 19706,  5451, 17554,
         21742, 19912, 14047,     3,     0],
        [    2, 11544, 21742, 10997,  1038, 17554, 21742,  3438, 24316, 26578,
          5772, 29298, 14047,     3,     0],
        [    2, 24819, 21742, 25000, 26186, 21397, 21773, 10982, 12774, 20363,
         28440, 29360, 14047,     3,     0]]), 'summ_char_rep': None, 'summ_len': tensor([15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 14,
        14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14]), 'tgt_seq': tensor([[    2, 28286,  8068, 12648, 11139, 21742, 16181,  3557, 21887,  6296,
         17096, 20363, 14503, 14047,     3],
        [    2,  9709,  6493, 11793, 22972, 22991, 27442, 21887,  5307, 27956,
         14503, 18213, 11793, 14047,     3],
        [    2,  1368, 27956,  2350, 18213,  6387, 17350, 21742, 12029, 13152,
         21414,  6947, 10534, 14047,     3],
        [    2, 11544,  8068,  6645, 14465, 28016, 20363, 21742,  6645,  3557,
          3963, 21742, 15142, 14047,     3],
        [    2, 28152,  1368, 27956, 21742,  3489, 20685, 18213,  6947, 21742,
          4435, 11139,  6268, 14047,     3],
        [    2, 11544,  1368, 27956, 21742,  3438,  4986, 29474, 18213,  8068,
         13638, 15161, 11076, 14047,     3],
        [    2, 15282, 20363,  3431,  7728, 24249, 11139,  3438, 14072, 11139,
          7728,  3394, 14438, 14047,     3],
        [    2, 29659,  8068,  2176,  1018,  7123, 17981,  8068,  8598,  2176,
         21887, 11196,  2176, 14047,     3],
        [    2, 20687, 13502, 15995,  4986,  7003,  8279, 15944, 11139, 17239,
         21055, 21397, 16224, 14047,     3],
        [    2,  7728, 17530,  6461, 16497, 16528,  8068, 20128,  7376, 24156,
          9159, 13326,  8428, 14047,     3],
        [    2, 24594, 21742, 22082,  6461,  6947, 21742,  6360, 20363, 21742,
         12611,  6947, 10542, 14047,     3],
        [    2,  8068, 20793, 20363, 29011, 10815, 21742, 11936,  3699, 23362,
         21742,  4783, 20793, 14047,     3],
        [    2,  5429, 21742,   443,  1018,  7728, 12573,   443, 14465,  3963,
           530, 21887, 13002, 14047,     3],
        [    2, 10353, 25562,  7003,  1168, 27268, 26578,  9498,  3316,  6947,
         28615, 21579,  3557, 14047,     3],
        [    2, 12724, 22972,  4226, 27500, 17554, 24493,  1018, 27492, 27110,
         10354,  6531, 26175, 14047,     3],
        [    2,  1480, 29486,  7728,  6466,  9059,  6947, 21742, 21397,  2176,
          2204, 16528, 17776, 14047,     3],
        [    2, 11544,  8068, 10571,  2176,  1018, 21742, 14805,  9658,  6947,
         21742,  9059, 15204, 14047,     3],
        [    2, 11544, 21742,  2176,  1018, 23284,  7003, 18717, 20491, 21742,
          3438, 22473, 14047,     3,     0],
        [    2, 29659, 20026, 28869, 17885, 16707, 24069, 21887,  4970, 16707,
         24069,  5804, 14047,     3,     0],
        [    2, 28152, 21742,  4928,  9449,  1018,  5169, 12648,  3865,  3963,
         20353,  3227, 14047,     3,     0],
        [    2, 23805, 17878,  6907, 21397, 19449, 24585, 22991, 21742, 19909,
         20186,  6714, 14047,     3,     0],
        [    2, 14085,  8068, 21954, 12885,  6947,  3326, 20363,  8068, 16489,
         27453,  9059, 14047,     3,     0],
        [    2, 24933,  8068, 15436,  2176, 17554,  8330,  7728, 25695, 20363,
          8068,  5089, 14047,     3,     0],
        [    2,  3748,  7728, 22121, 25430, 15421, 20363, 21742, 16181,  2899,
          9712, 24836, 14047,     3,     0],
        [    2, 24202, 21742, 15431,  6947, 21742,  9928, 11139,  8068, 12183,
         19872, 14297, 14047,     3,     0],
        [    2, 28286,  8068, 23424,  1651, 21397,  8068, 22257, 21887, 12450,
         21742,  1651, 14047,     3,     0],
        [    2, 11544,  1368, 27956, 21742,  3438, 12648, 12029, 18213,  8068,
         24211, 12648, 14047,     3,     0],
        [    2, 24933,  8068, 15436,  2176, 17554, 26773,  7728, 25695, 21397,
          8068,  5089, 14047,     3,     0],
        [    2, 11544, 21742, 13437,  1018, 21742, 24552,    37,  8068, 28690,
          1018,  4647, 14047,     3,     0],
        [    2, 28152,  1368, 27956, 16419,  6986,  5017, 19706,  5451, 17554,
         21742, 19912, 14047,     3,     0],
        [    2, 11544, 21742, 10997,  1038, 17554, 21742,  3438, 24316, 26578,
          5772, 29298, 14047,     3,     0],
        [    2, 24819, 21742, 25000, 26186, 21397, 21773, 10982, 12774, 20363,
         28440, 29360, 14047,     3,     0]]), 'code_text': ["def write file filename contents f open filename 'w' for line in contents f write line + '\\n' f close", 'def apply if callable maybe callable obj **kwargs if callable maybe callable return maybe callable obj **kwargs return maybe callable', 'def validate url path val if not validate str val return Falsereturn VALIDATE PATH RE match val end len val', 'def get dvs portgroup dvs portgroup name for portgroup in dvs portgroup if portgroup name portgroup name return portgroupreturn None', "def is team member name team name profile 'github' return name lower in list team members team name profile profile", "def is api view callback cls getattr callback 'cls' None return cls is not None and issubclass cls API View", 'def find xpath with wait context id str **kwargs return find elem with wait context By XPATH id str **kwargs', 'def format instances instances features header featuresdatarows [[getattr x f for f in features] for x in instances]return header datarows', "@app route '/hello' def hello response make response json dumps {'hello' current app config['HELLO']} response headers[' Content- Type'] 'application/json'return response", "def is indvar expr assert isinstance expr string types u'%sisnotastring' % expr return re match u'^[a-df-z]\\\\d*$' expr is not None", "def disable warnings option opt str value parser rootlogger logging get Logger '' rootlogger set Level logging WARNING + 1", 'def valid method call check resources resource method for name in resource keys valid method call check resource name method', '@contextmanagerdef isolate lru cache lru cache object lru cache object cache clear try yield finally lru cache object cache clear', "def test raw unicode escape dashes ok Truetry unicode 'hey' 'raw unicode-escape' except Lookup Error ok False Assert ok 'dashesandunderscoresshouldbeinterchangable'", "def process input files inputs for ifile in inputs with open ifile as fin exec compile fin read ifile 'exec'", "def test import list empty string x import 'testpkg 1 ' {} {} [''] Assert not '' in dir x", "def mapping keys s mapping keys re re compile '\\\\%\\\\ [^\\\\ ]*\\\\ \\\\w' return sorted mapping keys re findall s", 'def instances by name name filter return [o for o in gc get objects if name filter typename o ]', "def convert between ucsc and ensemble naming chrom if chrom startswith 'chr' return chrom[ 3 ]else return 'chr' + chrom", 'def get fdmax default None fdmax resource getrlimit resource RLIMIT NOFILE [1 ]if fdmax resource RLIM INFINITY return defaultreturn fdmax', 'def drop protected attrs model class values for attr in model class protected attributes if attr in values del values[attr]', "def format unixtime ms unixtime if unixtime return str datetime datetime fromtimestamp unixtime / 1000 strftime '%x%X%Z' else return ''", "def get added exploration change list exploration id return [{'cmd' collection domain CMD ADD COLLECTION NODE 'exploration id' exploration id}]", 'def add gateway router router ext network profile None conn auth profile return conn add gateway router router ext network', "def run Reduced Experiment path reduced True init Experiment Prng if reduced args [path '--test Mode']else args [path]run Experiment args", 'def converge service strategy Convergence Strategy changed plan service convergence plan strategy return service execute convergence plan plan timeout 1', "def is javascript file path ext os path splitext path [1 ] lower return ext in [u' js' u' javascript']", "def get deleted exploration change list exploration id return [{'cmd' collection domain CMD DELETE COLLECTION NODE 'exploration id' exploration id}]", "def iter sha 1 iter sha sha 1 for name in iter sha update name return sha hexdigest encode 'ascii'", "def are content experiments enabled course return 'split test' in ADVANCED COMPONENT TYPES and 'split test' in course advanced modules", 'def get itemsize context array type llty context get data type array type dtype return context get abi sizeof llty', '@frame transform graph transform coord Static Matrix Transform Sagittarius coord Galactic def sgr to galactic return matrix transpose SGR MATRIX'], 'code_tokens': [['def', 'write', 'file', 'filename', 'contents', 'f', 'open', 'filename', "'w'", 'for', 'line', 'in', 'contents', 'f', 'write', 'line', '+', "'\\n'", 'f', 'close'], ['def', 'apply', 'if', 'callable', 'maybe', 'callable', 'obj', '**kwargs', 'if', 'callable', 'maybe', 'callable', 'return', 'maybe', 'callable', 'obj', '**kwargs', 'return', 'maybe', 'callable'], ['def', 'validate', 'url', 'path', 'val', 'if', 'not', 'validate', 'str', 'val', 'return', 'Falsereturn', 'VALIDATE', 'PATH', 'RE', 'match', 'val', 'end', 'len', 'val'], ['def', 'get', 'dvs', 'portgroup', 'dvs', 'portgroup', 'name', 'for', 'portgroup', 'in', 'dvs', 'portgroup', 'if', 'portgroup', 'name', 'portgroup', 'name', 'return', 'portgroupreturn', 'None'], ['def', 'is', 'team', 'member', 'name', 'team', 'name', 'profile', "'github'", 'return', 'name', 'lower', 'in', 'list', 'team', 'members', 'team', 'name', 'profile', 'profile'], ['def', 'is', 'api', 'view', 'callback', 'cls', 'getattr', 'callback', "'cls'", 'None', 'return', 'cls', 'is', 'not', 'None', 'and', 'issubclass', 'cls', 'API', 'View'], ['def', 'find', 'xpath', 'with', 'wait', 'context', 'id', 'str', '**kwargs', 'return', 'find', 'elem', 'with', 'wait', 'context', 'By', 'XPATH', 'id', 'str', '**kwargs'], ['def', 'format', 'instances', 'instances', 'features', 'header', 'featuresdatarows', '[[getattr', 'x', 'f', 'for', 'f', 'in', 'features]', 'for', 'x', 'in', 'instances]return', 'header', 'datarows'], ['@app', 'route', "'/hello'", 'def', 'hello', 'response', 'make', 'response', 'json', 'dumps', "{'hello'", 'current', 'app', "config['HELLO']}", 'response', "headers['", 'Content-', "Type']", "'application/json'return", 'response'], ['def', 'is', 'indvar', 'expr', 'assert', 'isinstance', 'expr', 'string', 'types', "u'%sisnotastring'", '%', 'expr', 'return', 're', 'match', "u'^[a-df-z]\\\\d*$'", 'expr', 'is', 'not', 'None'], ['def', 'disable', 'warnings', 'option', 'opt', 'str', 'value', 'parser', 'rootlogger', 'logging', 'get', 'Logger', "''", 'rootlogger', 'set', 'Level', 'logging', 'WARNING', '+', '1'], ['def', 'valid', 'method', 'call', 'check', 'resources', 'resource', 'method', 'for', 'name', 'in', 'resource', 'keys', 'valid', 'method', 'call', 'check', 'resource', 'name', 'method'], ['@contextmanagerdef', 'isolate', 'lru', 'cache', 'lru', 'cache', 'object', 'lru', 'cache', 'object', 'cache', 'clear', 'try', 'yield', 'finally', 'lru', 'cache', 'object', 'cache', 'clear'], ['def', 'test', 'raw', 'unicode', 'escape', 'dashes', 'ok', 'Truetry', 'unicode', "'hey'", "'raw", "unicode-escape'", 'except', 'Lookup', 'Error', 'ok', 'False', 'Assert', 'ok', "'dashesandunderscoresshouldbeinterchangable'"], ['def', 'process', 'input', 'files', 'inputs', 'for', 'ifile', 'in', 'inputs', 'with', 'open', 'ifile', 'as', 'fin', 'exec', 'compile', 'fin', 'read', 'ifile', "'exec'"], ['def', 'test', 'import', 'list', 'empty', 'string', 'x', 'import', "'testpkg", '1', "'", '{}', '{}', "['']", 'Assert', 'not', "''", 'in', 'dir', 'x'], ['def', 'mapping', 'keys', 's', 'mapping', 'keys', 're', 're', 'compile', "'\\\\%\\\\", '[^\\\\', ']*\\\\', "\\\\w'", 'return', 'sorted', 'mapping', 'keys', 're', 'findall', 's'], ['def', 'instances', 'by', 'name', 'name', 'filter', 'return', '[o', 'for', 'o', 'in', 'gc', 'get', 'objects', 'if', 'name', 'filter', 'typename', 'o', ']'], ['def', 'convert', 'between', 'ucsc', 'and', 'ensemble', 'naming', 'chrom', 'if', 'chrom', 'startswith', "'chr'", 'return', 'chrom[', '3', ']else', 'return', "'chr'", '+', 'chrom'], ['def', 'get', 'fdmax', 'default', 'None', 'fdmax', 'resource', 'getrlimit', 'resource', 'RLIMIT', 'NOFILE', '[1', ']if', 'fdmax', 'resource', 'RLIM', 'INFINITY', 'return', 'defaultreturn', 'fdmax'], ['def', 'drop', 'protected', 'attrs', 'model', 'class', 'values', 'for', 'attr', 'in', 'model', 'class', 'protected', 'attributes', 'if', 'attr', 'in', 'values', 'del', 'values[attr]'], ['def', 'format', 'unixtime', 'ms', 'unixtime', 'if', 'unixtime', 'return', 'str', 'datetime', 'datetime', 'fromtimestamp', 'unixtime', '/', '1000', 'strftime', "'%x%X%Z'", 'else', 'return', "''"], ['def', 'get', 'added', 'exploration', 'change', 'list', 'exploration', 'id', 'return', "[{'cmd'", 'collection', 'domain', 'CMD', 'ADD', 'COLLECTION', 'NODE', "'exploration", "id'", 'exploration', 'id}]'], ['def', 'add', 'gateway', 'router', 'router', 'ext', 'network', 'profile', 'None', 'conn', 'auth', 'profile', 'return', 'conn', 'add', 'gateway', 'router', 'router', 'ext', 'network'], ['def', 'run', 'Reduced', 'Experiment', 'path', 'reduced', 'True', 'init', 'Experiment', 'Prng', 'if', 'reduced', 'args', '[path', "'--test", "Mode']else", 'args', '[path]run', 'Experiment', 'args'], ['def', 'converge', 'service', 'strategy', 'Convergence', 'Strategy', 'changed', 'plan', 'service', 'convergence', 'plan', 'strategy', 'return', 'service', 'execute', 'convergence', 'plan', 'plan', 'timeout', '1'], ['def', 'is', 'javascript', 'file', 'path', 'ext', 'os', 'path', 'splitext', 'path', '[1', ']', 'lower', 'return', 'ext', 'in', "[u'", "js'", "u'", "javascript']"], ['def', 'get', 'deleted', 'exploration', 'change', 'list', 'exploration', 'id', 'return', "[{'cmd'", 'collection', 'domain', 'CMD', 'DELETE', 'COLLECTION', 'NODE', "'exploration", "id'", 'exploration', 'id}]'], ['def', 'iter', 'sha', '1', 'iter', 'sha', 'sha', '1', 'for', 'name', 'in', 'iter', 'sha', 'update', 'name', 'return', 'sha', 'hexdigest', 'encode', "'ascii'"], ['def', 'are', 'content', 'experiments', 'enabled', 'course', 'return', "'split", "test'", 'in', 'ADVANCED', 'COMPONENT', 'TYPES', 'and', "'split", "test'", 'in', 'course', 'advanced', 'modules'], ['def', 'get', 'itemsize', 'context', 'array', 'type', 'llty', 'context', 'get', 'data', 'type', 'array', 'type', 'dtype', 'return', 'context', 'get', 'abi', 'sizeof', 'llty'], ['@frame', 'transform', 'graph', 'transform', 'coord', 'Static', 'Matrix', 'Transform', 'Sagittarius', 'coord', 'Galactic', 'def', 'sgr', 'to', 'galactic', 'return', 'matrix', 'transpose', 'SGR', 'MATRIX']], 'summ_text': ['create a file with the specified name and write contents to it .', 'evaluate possibly callable input using obj and kwargs if it is callable .', 'true if val is matched by the path component grammar in rfc3986 .', 'return a portgroup object corresponding to the portgroup name on the dvs .', 'returns true if the github user is in the team with team_name .', 'return true if the given view callback is a rest framework view/viewset .', 'tries to find an element with given xpath with an explicit timeout .', 'convert a list of instances into a header list and datarows list .', 'sample flask api view that ruturns json with some data from config .', 'an individual variable must be a single lowercase character other than e .', 'sets the location variable in the parser to the filename in question .', 'a method to check whether the resource can use the quota method .', 'clear the cache of an lru cache object on entering and exiting .', 'make sure that either dashes or underscores work in raw encoding name .', 'read input source files for execution of legacy @export / @exportmany decorators .', 'importing w/ an empty string in the from list should be ignored .', 'return a sorted list of the mapping keys in the string s .', 'return the list of objects that exactly match the given name_filter .', 'convert between ucsc chromosome naming conventions and ensembl naming conventions (1) .', 'returns the maximum number of open file descriptors on this system .', 'removed protected attributes from values dictionary using the models __protected_attributes__ field .', 'format a unix timestamp in ms to a human readable string .', 'generates a change list for adding an exploration to a collection .', 'adds an external network gateway to the specified router cli example: .', 'run the experiment in the <path> with a reduced iteration count .', 'create a converge plan from a strategy and execute the plan .', 'return true if the given file path is a javascript file .', 'generates a change list for deleting an exploration from a collection .', 'return the hexdigest of the sha1 over a set of names .', 'returns true if content experiments have been enabled for the course .', 'return the item size for the given array or buffer type .', 'compute the transformation matrix from heliocentric sgr coordinates to spherical galactic .'], 'summ_tokens': [['<s>', 'create', 'a', 'file', 'with', 'the', 'specified', 'name', 'and', 'write', 'contents', 'to', 'it', '.', '</s>'], ['<s>', 'evaluate', 'possibly', 'callable', 'input', 'using', 'obj', 'and', 'kwargs', 'if', 'it', 'is', 'callable', '.', '</s>'], ['<s>', 'true', 'if', 'val', 'is', 'matched', 'by', 'the', 'path', 'component', 'grammar', 'in', 'rfc3986', '.', '</s>'], ['<s>', 'return', 'a', 'portgroup', 'object', 'corresponding', 'to', 'the', 'portgroup', 'name', 'on', 'the', 'dvs', '.', '</s>'], ['<s>', 'returns', 'true', 'if', 'the', 'github', 'user', 'is', 'in', 'the', 'team', 'with', 'team_name', '.', '</s>'], ['<s>', 'return', 'true', 'if', 'the', 'given', 'view', 'callback', 'is', 'a', 'rest', 'framework', 'view/viewset', '.', '</s>'], ['<s>', 'tries', 'to', 'find', 'an', 'element', 'with', 'given', 'xpath', 'with', 'an', 'explicit', 'timeout', '.', '</s>'], ['<s>', 'convert', 'a', 'list', 'of', 'instances', 'into', 'a', 'header', 'list', 'and', 'datarows', 'list', '.', '</s>'], ['<s>', 'sample', 'flask', 'api', 'view', 'that', 'ruturns', 'json', 'with', 'some', 'data', 'from', 'config', '.', '</s>'], ['<s>', 'an', 'individual', 'variable', 'must', 'be', 'a', 'single', 'lowercase', 'character', 'other', 'than', 'e', '.', '</s>'], ['<s>', 'sets', 'the', 'location', 'variable', 'in', 'the', 'parser', 'to', 'the', 'filename', 'in', 'question', '.', '</s>'], ['<s>', 'a', 'method', 'to', 'check', 'whether', 'the', 'resource', 'can', 'use', 'the', 'quota', 'method', '.', '</s>'], ['<s>', 'clear', 'the', 'cache', 'of', 'an', 'lru', 'cache', 'object', 'on', 'entering', 'and', 'exiting', '.', '</s>'], ['<s>', 'make', 'sure', 'that', 'either', 'dashes', 'or', 'underscores', 'work', 'in', 'raw', 'encoding', 'name', '.', '</s>'], ['<s>', 'read', 'input', 'source', 'files', 'for', 'execution', 'of', 'legacy', '@export', '/', '@exportmany', 'decorators', '.', '</s>'], ['<s>', 'importing', 'w/', 'an', 'empty', 'string', 'in', 'the', 'from', 'list', 'should', 'be', 'ignored', '.', '</s>'], ['<s>', 'return', 'a', 'sorted', 'list', 'of', 'the', 'mapping', 'keys', 'in', 'the', 'string', 's', '.', '</s>'], ['<s>', 'return', 'the', 'list', 'of', 'objects', 'that', 'exactly', 'match', 'the', 'given', 'name_filter', '.', '</s>'], ['<s>', 'convert', 'between', 'ucsc', 'chromosome', 'naming', 'conventions', 'and', 'ensembl', 'naming', 'conventions', '(1)', '.', '</s>'], ['<s>', 'returns', 'the', 'maximum', 'number', 'of', 'open', 'file', 'descriptors', 'on', 'this', 'system', '.', '</s>'], ['<s>', 'removed', 'protected', 'attributes', 'from', 'values', 'dictionary', 'using', 'the', 'models', '__protected_attributes__', 'field', '.', '</s>'], ['<s>', 'format', 'a', 'unix', 'timestamp', 'in', 'ms', 'to', 'a', 'human', 'readable', 'string', '.', '</s>'], ['<s>', 'generates', 'a', 'change', 'list', 'for', 'adding', 'an', 'exploration', 'to', 'a', 'collection', '.', '</s>'], ['<s>', 'adds', 'an', 'external', 'network', 'gateway', 'to', 'the', 'specified', 'router', 'cli', 'example:', '.', '</s>'], ['<s>', 'run', 'the', 'experiment', 'in', 'the', '<path>', 'with', 'a', 'reduced', 'iteration', 'count', '.', '</s>'], ['<s>', 'create', 'a', 'converge', 'plan', 'from', 'a', 'strategy', 'and', 'execute', 'the', 'plan', '.', '</s>'], ['<s>', 'return', 'true', 'if', 'the', 'given', 'file', 'path', 'is', 'a', 'javascript', 'file', '.', '</s>'], ['<s>', 'generates', 'a', 'change', 'list', 'for', 'deleting', 'an', 'exploration', 'from', 'a', 'collection', '.', '</s>'], ['<s>', 'return', 'the', 'hexdigest', 'of', 'the', 'sha1', 'over', 'a', 'set', 'of', 'names', '.', '</s>'], ['<s>', 'returns', 'true', 'if', 'content', 'experiments', 'have', 'been', 'enabled', 'for', 'the', 'course', '.', '</s>'], ['<s>', 'return', 'the', 'item', 'size', 'for', 'the', 'given', 'array', 'or', 'buffer', 'type', '.', '</s>'], ['<s>', 'compute', 'the', 'transformation', 'matrix', 'from', 'heliocentric', 'sgr', 'coordinates', 'to', 'spherical', 'galactic', '.', '</s>']], 'src_vocab': [<c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374baecf8>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374baee10>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374baee48>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374baee80>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374baeeb8>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374baeef0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374baef28>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374baef60>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374baef98>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374baefd0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb0048>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb0080>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb00b8>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb00f0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb0128>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb0160>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb0198>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb01d0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb0208>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb0240>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb0278>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb02b0>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb02e8>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb0320>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb0358>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb0390>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb03c8>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb0400>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb0438>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb0470>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb04a8>, <c2nl.inputters.vocabulary.Vocabulary object at 0x7fc374bb04e0>], 'src_map': [tensor([ 2,  3,  4,  5,  6,  7,  8,  5,  9, 10, 11, 12,  6,  7,  3, 11, 13, 14,
         7, 15]), tensor([2, 3, 4, 5, 6, 5, 7, 8, 4, 5, 6, 5, 9, 6, 5, 7, 8, 9, 6, 5]), tensor([ 2,  3,  4,  5,  6,  7,  8,  3,  9,  6, 10, 11, 12, 13, 14, 15,  6, 16,
        17,  6]), tensor([ 2,  3,  4,  5,  4,  5,  6,  7,  5,  8,  4,  5,  9,  5,  6,  5,  6, 10,
        11, 12]), tensor([ 2,  3,  4,  5,  6,  4,  6,  7,  8,  9,  6, 10, 11, 12,  4, 13,  4,  6,
         7,  7]), tensor([ 2,  3,  4,  5,  6,  7,  8,  6,  9, 10, 11,  7,  3, 12, 10, 13, 14,  7,
        15, 16]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11,  3, 12,  5,  6,  7, 13, 14,  8,
         9, 10]), tensor([ 2,  3,  4,  4,  5,  6,  7,  8,  9, 10, 11, 10, 12, 13, 11,  9, 12, 14,
         6, 15]), tensor([ 2,  3,  4,  5,  6,  7,  8,  7,  9, 10, 11, 12, 13, 14,  7, 15, 16, 17,
        18,  7]), tensor([ 2,  3,  4,  5,  6,  7,  5,  8,  9, 10, 11,  5, 12, 13, 14, 15,  5,  3,
        16, 17]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 10, 15, 16, 11, 17,
        18, 19]), tensor([ 2,  3,  4,  5,  6,  7,  8,  4,  9, 10, 11,  8, 12,  3,  4,  5,  6,  8,
        10,  4]), tensor([ 2,  3,  4,  5,  4,  5,  6,  4,  5,  6,  5,  7,  8,  9, 10,  4,  5,  6,
         5,  7]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9,  5, 10, 11, 12, 13, 14, 15,  8, 16, 17,
         8, 18]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9,  6, 10, 11,  8, 12, 13, 14, 15, 13, 16,
         8, 17]), tensor([ 2,  3,  4,  5,  6,  7,  8,  4,  9, 10, 11, 12, 12, 13, 14, 15, 16, 17,
        18,  8]), tensor([ 2,  3,  4,  5,  3,  4,  6,  6,  7,  8,  9, 10, 11, 12, 13,  3,  4,  6,
        14,  5]), tensor([ 2,  3,  4,  5,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,  5,  6, 16,
        10, 17]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10,  9, 11, 12, 13, 14, 15, 16, 13, 12,
        17,  9]), tensor([ 2,  3,  4,  5,  6,  4,  7,  8,  7,  9, 10, 11, 12,  4,  7, 13, 14, 15,
        16,  4]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11,  6,  7,  4, 12, 13, 10, 11,  8,
        14, 15]), tensor([ 2,  3,  4,  5,  4,  6,  4,  7,  8,  9,  9, 10,  4, 11, 12, 13, 14, 15,
         7, 16]), tensor([ 2,  3,  4,  5,  6,  7,  5,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
         5, 19]), tensor([ 2,  3,  4,  5,  5,  6,  7,  8,  9, 10, 11,  8, 12, 10,  3,  4,  5,  5,
         6,  7]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9,  5, 10, 11,  7, 12, 13, 14, 15, 12, 16,
         5, 12]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9,  4, 10,  9,  5, 11,  4, 12, 10,  9,  9,
        13, 14]), tensor([ 2,  3,  4,  5,  6,  7,  8,  6,  9,  6, 10, 11, 12, 13,  7, 14, 15, 16,
        17, 18]), tensor([ 2,  3,  4,  5,  6,  7,  5,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
         5, 19]), tensor([ 2,  3,  4,  5,  3,  4,  4,  5,  6,  7,  8,  3,  4,  9,  7, 10,  4, 11,
        12, 13]), tensor([ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,  9, 10, 11,  7,
        16, 17]), tensor([ 2,  3,  4,  5,  6,  7,  8,  5,  3,  9,  7,  6,  7, 10, 11,  5,  3, 12,
        13,  8]), tensor([ 2,  3,  4,  3,  5,  6,  7,  8,  9,  5, 10, 11, 12, 13, 14, 15, 16, 17,
        18, 19])], 'alignment': [tensor([1, 1, 1, 4, 1, 1, 1, 1, 1, 3, 6, 1, 1, 1, 1]), tensor([1, 1, 1, 5, 1, 1, 7, 1, 1, 4, 1, 1, 5, 1, 1]), tensor([1, 1, 7, 6, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1]), tensor([ 1, 10,  1,  5,  1,  1,  1,  1,  5,  6,  1,  1,  4,  1,  1]), tensor([ 1,  1,  1,  1,  1,  1,  1,  3, 11,  1,  4,  1,  1,  1,  1]), tensor([ 1, 11,  1,  1,  1,  1,  5,  6,  3,  1,  1,  1,  1,  1,  1]), tensor([1, 1, 1, 3, 1, 1, 5, 1, 4, 5, 1, 1, 1, 1, 1]), tensor([ 1,  1,  1,  1,  1,  4,  1,  1,  6,  1,  1, 15,  1,  1,  1]), tensor([1, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1]), tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), tensor([1, 1, 1, 1, 1, 1, 1, 9, 1, 1, 1, 1, 1, 1, 1]), tensor([1, 1, 4, 1, 6, 1, 1, 8, 1, 1, 1, 1, 4, 1, 1]), tensor([1, 7, 1, 5, 1, 1, 4, 5, 6, 1, 1, 1, 1, 1, 1]), tensor([1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 4, 1, 1, 1, 1]), tensor([ 1, 16,  4,  1,  5,  7,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([ 1,  1,  1,  1,  6,  7, 17,  1,  1,  5,  1,  1,  1,  1,  1]), tensor([ 1, 12,  1, 13,  1,  1,  1,  3,  4,  1,  1,  1,  5,  1,  1]), tensor([ 1,  7,  1,  1,  1, 14,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([1, 3, 4, 5, 1, 8, 1, 6, 1, 8, 1, 1, 1, 1]), tensor([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), tensor([ 1,  1,  4, 12,  1,  8,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([1, 3, 1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1]), tensor([ 1,  1,  1,  6,  7,  1,  1,  1,  5,  1,  1, 11,  1,  1]), tensor([1, 1, 1, 1, 7, 4, 1, 1, 1, 5, 1, 1, 1, 1]), tensor([1, 3, 1, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1]), tensor([ 1,  1,  1,  3,  9,  1,  1,  5,  1, 12,  1,  9,  1,  1]), tensor([ 1, 13,  1,  1,  1,  1,  5,  6,  3,  1,  4,  5,  1,  1]), tensor([ 1,  1,  1,  6,  7,  1,  1,  1,  5,  1,  1, 11,  1,  1]), tensor([ 1, 10,  1, 11,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1]), tensor([1, 1, 1, 1, 4, 5, 1, 1, 6, 1, 1, 7, 1, 1]), tensor([ 1, 11,  1,  1,  1,  1,  1,  1,  6,  1,  1,  7,  1,  1]), tensor([ 1,  1,  1,  1, 16,  1,  1, 12,  1, 13,  1, 14,  1,  1])], 'stype': [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]}