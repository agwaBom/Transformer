{'ids': [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None], 'language': [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 'batch_size': 32, 'code_word_rep': tensor([[ 9353, 39667, 31863,  5982, 30468],
        [ 9353, 48394, 35283,  1313, 48394],
        [ 9353, 10333, 34446, 13557, 45000],
        [ 9353, 14615,  8297,  5982, 10296],
        [ 9353, 22169,  5982, 44659,  2160],
        [ 9353, 43882,  3718,  8205, 36567],
        [ 9353, 17956, 26612,  5449, 35119],
        [ 9353, 30537,  5982, 23953, 30537],
        [ 9353, 17423, 19192, 30963, 38516],
        [ 9353,  4454,     1, 33214, 45000],
        [19861, 43973,  3420,  5982, 37655],
        [ 9353,  4454,     1, 33214, 45000],
        [ 9353,  4454,     1, 33214, 45000],
        [ 9353,  4454,     1, 33214, 45000],
        [ 9353, 31863, 35284,  5982, 37625],
        [ 9353,  8043,  5982, 23953,  8043],
        [ 9353, 34478, 28416,  5982, 28416],
        [ 9353, 12329, 32517,  5982, 32517],
        [ 9353, 48394,   468, 39517, 48394],
        [ 9353,  5582, 29154,  5982, 33214],
        [ 9353, 12329, 39795,  5982, 39795],
        [ 9353, 35283, 32509,  5982, 29154],
        [ 9353, 34630,  5982, 45138, 34630],
        [ 9353, 19442,  5982, 29109, 18382],
        [47819, 26681,     1, 15723, 45000],
        [ 9353, 41389,  5982, 13847, 24246],
        [ 9353, 31802,  5982,  4255, 23736],
        [ 9353, 41389,  5982, 13847, 34089],
        [ 9353,     1,  5982, 25202,  4267],
        [ 9353,  1343,  7773,  5982,     1],
        [ 9353,  5582,  8177, 47716,  5703],
        [ 9353,  8177, 22617,  8177, 40411]]), 'code_char_rep': None, 'code_type_rep': None, 'code_mask_rep': None, 'code_len': tensor([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5]), 'summ_word_rep': tensor([[14616, 23782, 19143,  3139,  8655,  5086, 18362],
        [14616, 20506, 17945, 13096,   785,  5086, 18362],
        [14616, 20619, 19800, 20619, 12181,  5086, 18362],
        [14616,  1603, 18103, 12911, 24375,  5086, 18362],
        [14616, 13434, 15897, 23244,  1842,  5086, 18362],
        [14616, 29017, 11809,   785,  2339,  5086, 18362],
        [14616,  5159, 17022,  8062, 23799,  5086, 18362],
        [14616, 15306, 11809,  3021, 13831,  5086, 18362],
        [14616, 12393,   559,  7556, 23508,  5086, 18362],
        [14616, 13695,   341, 19800,   678,  5086, 18362],
        [14616,  3567,  8062,  2049, 11873,  5086, 18362],
        [14616, 13695,   341, 19800,   678,  5086, 18362],
        [14616, 13695,   341, 19800,   678,  5086, 18362],
        [14616, 13695,   341, 19800,   678,  5086, 18362],
        [14616,  3567, 19143, 16939, 21155,  5086, 18362],
        [14616, 15306, 11809,  4866, 16275,  5086, 18362],
        [14616, 20635,  1547,  1347,  5086, 18362,     0],
        [14616, 15306, 19499, 14013,  5086, 18362,     0],
        [14616, 22899,   297,  3834,  5086, 18362,     0],
        [14616,  3343, 17528, 19926,  5086, 18362,     0],
        [14616,  3567,  9029, 24881,  5086, 18362,     0],
        [14616, 10005, 25225, 11997,  5086, 18362,     0],
        [14616,  3567, 11809, 20742,  5086, 18362,     0],
        [14616, 11774, 16510,  3454,  5086, 18362,     0],
        [14616,  8062,  9485,  1603,  5086, 18362,     0],
        [14616, 20671, 24814, 11980,  5086, 18362,     0],
        [14616, 26244, 22899, 17145,  5086, 18362,     0],
        [14616, 20671, 24814, 11980,  5086, 18362,     0],
        [14616, 13904, 14942, 29868,  5086, 18362,     0],
        [14616,  3567, 15108,  4806,  5086, 18362,     0],
        [14616,  5120, 26947,  1347,  5086, 18362,     0],
        [14616,  3519, 16692, 28375,  5086, 18362,     0]]), 'summ_char_rep': None, 'summ_len': tensor([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6]), 'tgt_seq': tensor([[14616, 23782, 19143,  3139,  8655,  5086, 18362],
        [14616, 20506, 17945, 13096,   785,  5086, 18362],
        [14616, 20619, 19800, 20619, 12181,  5086, 18362],
        [14616,  1603, 18103, 12911, 24375,  5086, 18362],
        [14616, 13434, 15897, 23244,  1842,  5086, 18362],
        [14616, 29017, 11809,   785,  2339,  5086, 18362],
        [14616,  5159, 17022,  8062, 23799,  5086, 18362],
        [14616, 15306, 11809,  3021, 13831,  5086, 18362],
        [14616, 12393,   559,  7556, 23508,  5086, 18362],
        [14616, 13695,   341, 19800,   678,  5086, 18362],
        [14616,  3567,  8062,  2049, 11873,  5086, 18362],
        [14616, 13695,   341, 19800,   678,  5086, 18362],
        [14616, 13695,   341, 19800,   678,  5086, 18362],
        [14616, 13695,   341, 19800,   678,  5086, 18362],
        [14616,  3567, 19143, 16939, 21155,  5086, 18362],
        [14616, 15306, 11809,  4866, 16275,  5086, 18362],
        [14616, 20635,  1547,  1347,  5086, 18362,     0],
        [14616, 15306, 19499, 14013,  5086, 18362,     0],
        [14616, 22899,   297,  3834,  5086, 18362,     0],
        [14616,  3343, 17528, 19926,  5086, 18362,     0],
        [14616,  3567,  9029, 24881,  5086, 18362,     0],
        [14616, 10005, 25225, 11997,  5086, 18362,     0],
        [14616,  3567, 11809, 20742,  5086, 18362,     0],
        [14616, 11774, 16510,  3454,  5086, 18362,     0],
        [14616,  8062,  9485,  1603,  5086, 18362,     0],
        [14616, 20671, 24814, 11980,  5086, 18362,     0],
        [14616, 26244, 22899, 17145,  5086, 18362,     0],
        [14616, 20671, 24814, 11980,  5086, 18362,     0],
        [14616, 13904, 14942, 29868,  5086, 18362,     0],
        [14616,  3567, 15108,  4806,  5086, 18362,     0],
        [14616,  5120, 26947,  1347,  5086, 18362,     0],
        [14616,  3519, 16692, 28375,  5086, 18362,     0]]), 'code_text': ['def retry all return True', 'def clear get cache clear', 'def p statements t pass', 'def islink path return False', 'def fetch return run Fetch', 'def clearcache global cachecache {}', 'def instantiate d defer Deferred', 'def system return uname system', 'def exit raise System Exit', 'def root excitingmixing doc pass', '@pytest fixturedef guest return Guest', 'def root diagbroyden doc pass', 'def root linearmixing doc pass', 'def root anderson doc pass', 'def all hooks return HOOKS', 'def machine return uname machine', 'def linear x return x', 'def identity content return content', 'def clear subscribers SUBSCRIBERS clear', 'def f 1 return doc', 'def identity arg return arg', 'def get Interval return 1', 'def desktop return app desktop', 'def locked return coin flip', '@dec as unittestdef trivial pass', 'def plugin return Select Attr', 'def index return Http Response', 'def plugin return Select Bracket', "def getregentry return registry 'latex'", "def nftables cmd return 'nft'", "def f print 'f'return 2", "def print options print ''"], 'code_tokens': [['def', 'retry', 'all', 'return', 'True'], ['def', 'clear', 'get', 'cache', 'clear'], ['def', 'p', 'statements', 't', 'pass'], ['def', 'islink', 'path', 'return', 'False'], ['def', 'fetch', 'return', 'run', 'Fetch'], ['def', 'clearcache', 'global', 'cachecache', '{}'], ['def', 'instantiate', 'd', 'defer', 'Deferred'], ['def', 'system', 'return', 'uname', 'system'], ['def', 'exit', 'raise', 'System', 'Exit'], ['def', 'root', 'excitingmixing', 'doc', 'pass'], ['@pytest', 'fixturedef', 'guest', 'return', 'Guest'], ['def', 'root', 'diagbroyden', 'doc', 'pass'], ['def', 'root', 'linearmixing', 'doc', 'pass'], ['def', 'root', 'anderson', 'doc', 'pass'], ['def', 'all', 'hooks', 'return', 'HOOKS'], ['def', 'machine', 'return', 'uname', 'machine'], ['def', 'linear', 'x', 'return', 'x'], ['def', 'identity', 'content', 'return', 'content'], ['def', 'clear', 'subscribers', 'SUBSCRIBERS', 'clear'], ['def', 'f', '1', 'return', 'doc'], ['def', 'identity', 'arg', 'return', 'arg'], ['def', 'get', 'Interval', 'return', '1'], ['def', 'desktop', 'return', 'app', 'desktop'], ['def', 'locked', 'return', 'coin', 'flip'], ['@dec', 'as', 'unittestdef', 'trivial', 'pass'], ['def', 'plugin', 'return', 'Select', 'Attr'], ['def', 'index', 'return', 'Http', 'Response'], ['def', 'plugin', 'return', 'Select', 'Bracket'], ['def', 'getregentry', 'return', 'registry', "'latex'"], ['def', 'nftables', 'cmd', 'return', "'nft'"], ['def', 'f', 'print', "'f'return", '2'], ['def', 'print', 'options', 'print', "''"]], 'summ_text': ['retry all caught exceptions .', 'clears globally installed cache .', 'statements : statements statement .', 'test for symbolic link .', 'fetch from remote repositories .', 'clear the cache entirely .', 'only create a deferred .', 'returns the system/os name .', 'dummy implementation of thread .', 'options nit : int .', 'return a guest user .', 'options nit : int .', 'options nit : int .', 'options nit : int .', 'return all registered hooks .', 'returns the machine type .', 'linear activation function .', 'returns content unchanged .', 'empty subscribers dictionary .', 'f 1 doc .', 'return argument untouched .', 'interval in seconds .', 'return the desktop .', 'locked or unlocked .', 'a trivial test .', 'make plugin available .', 'an empty view .', 'make plugin available .', 'encodings module api .', 'return correct command .', 'very nice function .', 'displays usage information .'], 'summ_tokens': [['<s>', 'retry', 'all', 'caught', 'exceptions', '.', '</s>'], ['<s>', 'clears', 'globally', 'installed', 'cache', '.', '</s>'], ['<s>', 'statements', ':', 'statements', 'statement', '.', '</s>'], ['<s>', 'test', 'for', 'symbolic', 'link', '.', '</s>'], ['<s>', 'fetch', 'from', 'remote', 'repositories', '.', '</s>'], ['<s>', 'clear', 'the', 'cache', 'entirely', '.', '</s>'], ['<s>', 'only', 'create', 'a', 'deferred', '.', '</s>'], ['<s>', 'returns', 'the', 'system/os', 'name', '.', '</s>'], ['<s>', 'dummy', 'implementation', 'of', 'thread', '.', '</s>'], ['<s>', 'options', 'nit', ':', 'int', '.', '</s>'], ['<s>', 'return', 'a', 'guest', 'user', '.', '</s>'], ['<s>', 'options', 'nit', ':', 'int', '.', '</s>'], ['<s>', 'options', 'nit', ':', 'int', '.', '</s>'], ['<s>', 'options', 'nit', ':', 'int', '.', '</s>'], ['<s>', 'return', 'all', 'registered', 'hooks', '.', '</s>'], ['<s>', 'returns', 'the', 'machine', 'type', '.', '</s>'], ['<s>', 'linear', 'activation', 'function', '.', '</s>'], ['<s>', 'returns', 'content', 'unchanged', '.', '</s>'], ['<s>', 'empty', 'subscribers', 'dictionary', '.', '</s>'], ['<s>', 'f', '1', 'doc', '.', '</s>'], ['<s>', 'return', 'argument', 'untouched', '.', '</s>'], ['<s>', 'interval', 'in', 'seconds', '.', '</s>'], ['<s>', 'return', 'the', 'desktop', '.', '</s>'], ['<s>', 'locked', 'or', 'unlocked', '.', '</s>'], ['<s>', 'a', 'trivial', 'test', '.', '</s>'], ['<s>', 'make', 'plugin', 'available', '.', '</s>'], ['<s>', 'an', 'empty', 'view', '.', '</s>'], ['<s>', 'make', 'plugin', 'available', '.', '</s>'], ['<s>', 'encodings', 'module', 'api', '.', '</s>'], ['<s>', 'return', 'correct', 'command', '.', '</s>'], ['<s>', 'very', 'nice', 'function', '.', '</s>'], ['<s>', 'displays', 'usage', 'information', '.', '</s>']], 'src_vocab': [<SCTG.inputters.vocabulary.Vocabulary object at 0x7fc313274d60>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc313274f40>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc313274eb0>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc313274fa0>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b43040>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b430a0>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b43100>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b43160>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b431c0>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b43220>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b43280>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b432e0>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b43340>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b433a0>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b43400>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b43460>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b434c0>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b43520>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b43580>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b435e0>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b43640>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b436a0>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b43700>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b43760>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b437c0>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b43820>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b43880>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b438e0>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b43940>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b439a0>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b43a00>, <SCTG.inputters.vocabulary.Vocabulary object at 0x7fc312b43a60>], 'src_map': [tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 3]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 3]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 3]), tensor([2, 3, 4, 5, 4]), tensor([2, 3, 4, 5, 4]), tensor([2, 3, 4, 5, 3]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 4]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 3]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 5, 6]), tensor([2, 3, 4, 3, 5])], 'alignment': [tensor([1, 3, 4, 1, 1, 1, 1]), tensor([1, 1, 1, 1, 5, 1, 1]), tensor([1, 4, 1, 4, 1, 1, 1]), tensor([1, 1, 1, 1, 1, 1, 1]), tensor([1, 3, 1, 1, 1, 1, 1]), tensor([1, 1, 1, 1, 1, 1, 1]), tensor([1, 1, 1, 1, 1, 1, 1]), tensor([1, 1, 1, 1, 1, 1, 1]), tensor([1, 1, 1, 1, 1, 1, 1]), tensor([1, 1, 1, 1, 1, 1, 1]), tensor([1, 5, 1, 4, 1, 1, 1]), tensor([1, 1, 1, 1, 1, 1, 1]), tensor([1, 1, 1, 1, 1, 1, 1]), tensor([1, 1, 1, 1, 1, 1, 1]), tensor([1, 5, 3, 1, 4, 1, 1]), tensor([1, 1, 1, 3, 1, 1, 1]), tensor([1, 3, 1, 1, 1, 1]), tensor([1, 1, 4, 1, 1, 1]), tensor([1, 1, 4, 1, 1, 1]), tensor([1, 3, 4, 6, 1, 1]), tensor([1, 5, 1, 1, 1, 1]), tensor([1, 1, 1, 1, 1, 1]), tensor([1, 4, 1, 3, 1, 1]), tensor([1, 3, 1, 1, 1, 1]), tensor([1, 1, 5, 1, 1, 1]), tensor([1, 1, 3, 1, 1, 1]), tensor([1, 1, 1, 1, 1, 1]), tensor([1, 1, 3, 1, 1, 1]), tensor([1, 1, 1, 1, 1, 1]), tensor([1, 5, 1, 1, 1, 1]), tensor([1, 1, 1, 1, 1, 1]), tensor([1, 1, 1, 1, 1, 1])], 'stype': [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]}